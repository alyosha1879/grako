#!/usr/env/bin python
# -*- coding: utf-8 -*-
#
# CAVEAT UTILITOR
# This file was automatically generated by Grako.
#    https://bitbucket.org/apalala/grako/
# Any changes you make to it will be overwritten the
# next time the file is generated.
#

from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import * # @UnusedWildImport
from grako.exceptions import * # @UnusedWildImport

__version__ = '17.025.15.48.00'

class telNumGramParser(Parser):
    @rule_def
    def telnum(self):
        self.num()
        self.num()
        self.num()
        self.hyphen()
        self.num()
        self.num()
        self.num()
        self.num()
        self.hyphen()
        self.num()
        self.num()
        self.num()
        self.num()

    @rule_def
    def hyphen(self):
        self._token('-')

    @rule_def
    def num(self):
        self._pattern(r'[0-9]')



class telNumGramSemanticParser(CheckSemanticsMixin, telNumGramParser):
    pass


class telNumGramSemantics(object):
    def telnum(self, ast):
        return ast

    def hyphen(self, ast):
        return ast

    def num(self, ast):
        return ast

def main(filename, startrule):
    import json
    with open(filename) as f:
        text = f.read()
    parser = telNumGramParser(parseinfo=False)
    ast = parser.parse(text, startrule, filename=filename)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import sys
    if '-l' in sys.argv:
        print('Rules:')
        for r in telNumGramParser.rule_list():
            print(r)
        print()
    elif len(sys.argv) == 3:
        main(sys.argv[1], sys.argv[2])
    else:
        print('Usage:')
        program = sys.argv[0].split('/')[-1]
        print(program, ' <filename> <startrule>')
        print(program, ' -l') # list rules
        print(program, ' -h')
